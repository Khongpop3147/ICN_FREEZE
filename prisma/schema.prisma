generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  passwordHash        String
  role                String               @default("USER")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]
  cart                Cart?
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  categoryId  String?
  createdAt   DateTime    @default(now())
  description String?
  imageUrl    String?
  stock       Int         @default(0)
  updatedAt   DateTime    @updatedAt
  salePrice   Float?
  isFeatured  Boolean     @default(false)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  status        String      @default("PENDING")
  totalAmount   Float
  paymentMethod String?
  couponId      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  slipUrl       String?
  city          String
  country       String
  line1         String
  line2         String?
  postalCode    String?
  recipient     String
  line3         String?
  coupon        Coupon?     @relation(fields: [couponId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
}

model Coupon {
  id            String    @id @default(uuid())
  code          String    @unique
  discountType  String
  discountValue Float
  usageLimit    Int?
  usedCount     Int       @default(0)
  expiresAt     DateTime?
  orders        Order[]
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  recipient  String
  line1      String
  line2      String?
  city       String
  postalCode String
  country    String
  user       User    @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entity      String
  entityId    String
  performedBy String
  timestamp   DateTime @default(now())
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String?
  createdAt DateTime @default(now())
}

model Banner {
  id          String   @id @default(uuid())
  title       String?
  sub         String?
  imageUrl    String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  position    String   @default("hero")
  description String?
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Supplier {
  id          String   @id @default(uuid())
  companyName String
  productName String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  unitPrice   Float    @default(0)
}

model SubBanner {
  id          String   @id @default(uuid())
  title       String
  description String
  buttonText  String
  buttonLink  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
